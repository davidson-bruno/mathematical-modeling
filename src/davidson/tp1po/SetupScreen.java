/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package davidson.tp1po;

import gurobi.*;
import javax.swing.JOptionPane;

/**
 *
 * @author Davidson
 */
public class SetupScreen extends javax.swing.JFrame {

    // <editor-fold defaultstate="collapsed" desc="Attributes">
    private final MainScreen mainScreen;
    private final Object[][] tableRows;
    private String resultMessage;
    // </editor-fold>
    
    /**
     * Creates new form SetupScreen
     * @param mainScreen
     */
    public SetupScreen(MainScreen mainScreen) {
        this.mainScreen = mainScreen;
        
        int rowsCount = mainScreen.getEndTimeHour() - mainScreen.getStartTimeHour();
        
        tableRows = new Object[rowsCount][2];
        
        for(int i = 0, j = mainScreen.getStartTimeHour(); i < rowsCount; i++, j++) {
            String end = mainScreen.getHours()[j].replace(":00", ":59");
            tableRows[i][0] = "De " + mainScreen.getHours()[j] + " até " + end;
            tableRows[i][1] = "3";
            System.out.println(tableRows[i][0]);
            System.out.println(tableRows[i][1]);
        }
        
        initComponents();
    }
    
    // <editor-fold defaultstate="collapsed" desc="Getters">
    public MainScreen getMainScreen() {
        return this.mainScreen;
    }
    
    public String getResultMessage() {
        return this.resultMessage;
    }
    // </editor-fold>
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        titleProblemScrollPane = new javax.swing.JScrollPane();
        questionTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        nextButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setExtendedState(MAXIMIZED_BOTH);

        panel.setBackground(new java.awt.Color(255, 255, 255));

        titleProblemScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        titleProblemScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        titleProblemScrollPane.setEnabled(false);
        titleProblemScrollPane.setFocusable(false);

        questionTextArea.setEditable(false);
        questionTextArea.setColumns(20);
        questionTextArea.setFont(new java.awt.Font("Segoe UI", 0, 21)); // NOI18N
        questionTextArea.setForeground(new java.awt.Color(102, 102, 102));
        questionTextArea.setLineWrap(true);
        questionTextArea.setRows(2);
        questionTextArea.setText("Quantos estagiários precisam atuar em cada hora do período de trabalho para atender o Departamento de Computação?");
        questionTextArea.setWrapStyleWord(true);
        titleProblemScrollPane.setViewportView(questionTextArea);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        table.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        table.setForeground(new java.awt.Color(102, 102, 102));
        table.setModel(new javax.swing.table.DefaultTableModel(
            tableRows,
            new String [] {
                "Hora", "Estagiários"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(30);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.setShowHorizontalLines(false);
        table.setShowVerticalLines(false);
        table.getTableHeader().setResizingAllowed(false);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(table);

        nextButton.setBackground(new java.awt.Color(255, 255, 255));
        nextButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nextButton.setText("Continuar");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(titleProblemScrollPane)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE))
                    .addComponent(nextButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addComponent(titleProblemScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(nextButton)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        //System.out.println(table.getModel().getValueAt(1, 1));
        
        try {
            
            // Define o mecanismo do Gurobi para resolver o problema
        
            GRBEnv enviroment = new GRBEnv("po.tp1.log");
            GRBModel model = new GRBModel(enviroment);
            GRBVar[] variables = new GRBVar[table.getModel().getRowCount()];

            // Cria as variáveis

            for (int i = 0; i < variables.length; ++i) {
                variables[i] = model.addVar(0.0, GRB.INFINITY, 0.0, GRB.INTEGER, "X" + (i + mainScreen.getStartTimeHour()));
            }

            // Configura a função objetivo

            GRBLinExpr expression = new GRBLinExpr();

            for (int i = 0; i < variables.length; ++i) {
                expression.addTerm(1, variables[i]);
            }

            model.setObjective(expression, GRB.MINIMIZE);

            // Adiciona a restrição: X[12] = 0

            if(mainScreen.getStartTimeHour() < 12 && mainScreen.getEndTimeHour() >= 12) {
                expression = new GRBLinExpr();
                expression.addTerm(1.0, variables[12 - mainScreen.getStartTimeHour()]);
                model.addConstr(expression, GRB.EQUAL, 0.0, "C" + 1);
            }

            // Adiciona a restrição: X[9] >= 2

            expression = new GRBLinExpr();
            expression.addTerm(1.0, variables[0]);
            model.addConstr(expression, GRB.GREATER_EQUAL, Double.parseDouble(table.getModel().getValueAt(0, 1).toString()), "C" + 2);

            // Adiciona a restrição: X[10] + X[9] >= 2

            expression = new GRBLinExpr();
            expression.addTerm(1.0, variables[1]);
            expression.addTerm(1.0, variables[0]);
            model.addConstr(expression, GRB.GREATER_EQUAL, Double.parseDouble(table.getModel().getValueAt(1, 1).toString()), "C" + 3);

            // Adiciona as restrições: X[i] + X[i-1] + X[i-2] >= 3; 11 <= i < 18, para todo i pertencente a N

            for (int i = 2; i < variables.length; ++i) {
                expression = new GRBLinExpr();
                expression.addTerm(1.0, variables[i]);
                expression.addTerm(1.0, variables[i-1]);
                expression.addTerm(1.0, variables[i-2]);
                model.addConstr(expression, GRB.GREATER_EQUAL, Double.parseDouble(table.getModel().getValueAt(i, 1).toString()), "C" + (i + 2));
            }

            // Procura pela solução

            model.optimize();
            
            int status = model.get(GRB.IntAttr.Status);
            
            if (status == GRB.Status.UNBOUNDED) {
                Object[] options = {"Ok"};
                JOptionPane.showOptionDialog(this, "O modelo não pode ser resolvido porque é ilimitado!", "Erro", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
                this.dispose();
                this.mainScreen.setVisible(true);
            }
            
            if (status == GRB.Status.INFEASIBLE) {
                Object[] options = {"Ok"};
                JOptionPane.showOptionDialog(this, "O modelo não pode ser resolvido!", "Erro", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
                this.dispose();
                this.mainScreen.setVisible(true);
            }
            
            if (status == GRB.Status.OPTIMAL) {
                
                this.resultMessage = "O Departamento de Computação deve contratar " + (int)model.get(GRB.DoubleAttr.ObjVal) + " estagiários, dos quais:\n\n";
                
                for(int i = mainScreen.getStartTimeHour(), j = 0; i < mainScreen.getEndTimeHour(); i++, j++) {
                    this.resultMessage += (int)variables[j].get(GRB.DoubleAttr.X) + " devem começar a trabalhar às " + mainScreen.getHours()[i] + "\n";
                }

                ResultScreen resultScreen = new ResultScreen(this);
                resultScreen.setVisible(true);
                this.setVisible(false);
            }
            
            // Dispose
            
            model.dispose();
            enviroment.dispose();
        }
        catch(GRBException e) {
            Object[] options = {"Ok"};
            JOptionPane.showOptionDialog(this, "Desculpe! Alguma coisa deu errado :(\nError code: " + e.getErrorCode() + ". " + e.getMessage(), "Erro", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SetupScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            private MainScreen mainScreen;
            
            @Override
            public void run() {
                //new SetupScreen(this.mainScreen).setVisible(true);
                new SetupScreen(this.mainScreen).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton nextButton;
    private javax.swing.JPanel panel;
    private javax.swing.JTextArea questionTextArea;
    private javax.swing.JTable table;
    private javax.swing.JScrollPane titleProblemScrollPane;
    // End of variables declaration//GEN-END:variables
}
